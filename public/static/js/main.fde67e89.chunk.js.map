{"version":3,"sources":["components/EventListView.js","components/EventModel.js","components/EventCalendar.js","components/Home.js","App.js","serviceWorker.js","index.js","const.js"],"names":["EventListView","props","tableIcons","Add","forwardRef","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","React","useState","events","setEvents","columns","title","field","type","lookup","Appointment","Meeting","Reminder","Game","Movie","Concert","Meetup","Other","hidden","data","state","useEffect","fetch","uriBase","eventsApi","method","headers","then","httpResult","ok","Error","json","console","log","catch","error","icons","editable","onRowAdd","newData","Promise","resolve","setTimeout","prevState","newEvent","push","body","JSON","stringify","onRowUpdate","oldData","updatedEvent","indexOf","id","onRowDelete","deleteEvent","splice","dbDeleteEvent","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","SimpleModal","classes","modalStyle","Modal","aria-labelledby","aria-describedby","open","onClose","setOpen","style","className","event","description","Date","date","toLocaleDateString","moment","toDate","add","subtract","localizer","momentLocalizer","EventCalendar","setEvent","setDbEvents","openModel","setOpenModel","mapEventsToCalendar","a","dbEvents","calEvents","reduce","acc","value","name","start","end","defaultDate","defaultView","height","views","onSelectEvent","Home","view","setView","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.fde67e89.chunk.js","sourcesContent":["import React from 'react';\nimport MaterialTable from 'material-table'\nimport { forwardRef } from 'react';\nimport { uriBase, eventsApi } from '../const'\n\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowUpward from '@material-ui/icons/ArrowUpward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\n\nfunction EventListView(props) {\n    const tableIcons = {\n        Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n        Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n        Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n        Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n        DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n        Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n        Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n        Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n        FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n        LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n        NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n        PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\n        ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n        Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n        SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n        ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n        ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\n    };\n\n    const [events, setEvents] = React.useState([])\n\n    // the state for the table\n    const [state] = React.useState({\n        columns: [\n            { title: 'Name', field: 'name' },\n            { title: 'Description', field: 'description' },\n            { title: 'Date', field: 'date', type: 'date' },\n            {\n                title: 'Type',\n                field: 'type',\n                lookup: {\n                    Appointment: \"Appointment\",\n                    Meeting: \"Meeting\",\n                    Reminder: \"Reminder\",\n                    Game: \"Game\",\n                    Movie: \"Movie\",\n                    Concert: \"Concert\",\n                    Meetup: \"Meetup\",\n                    Other: \"Other\"\n                }\n            },\n            { title: 'ID', field: '_id', hidden: true }\n        ],\n        data: []\n    });\n\n    const getEvents = () => {\n\n        fetch(`${uriBase}${eventsApi}/all`, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n            .then(httpResult => {\n                if (!httpResult.ok) {\n                    throw new Error(\"Failed to get all events\")\n                }\n                return httpResult.json()\n            })\n            .then(events => {\n                console.log(events)\n                setEvents(events)\n            })\n            .catch(error => {\n                console.log(error)\n            })\n    }\n\n    const addEventToDb = (newEvent) => {\n\n        fetch(`${uriBase}${eventsApi}/new`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(newEvent)\n        })\n            .then(httpResult => {\n                if (!httpResult.ok) {\n                    throw new Error(\"Could not create user\")\n                }\n\n                return httpResult.json()\n            })\n            .catch(error => {\n                console.log(error)\n            })\n\n    }\n\n    const dbUpdateEvent = (updatedEvent) => {\n\n        fetch(`${uriBase}${eventsApi}/update/${updatedEvent.id}`, {\n            method: \"PATCH\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(updatedEvent)\n        })\n            .then(httpResult => {\n                if (!httpResult.ok) {\n                    throw new Error(\"Could not update user\")\n                }\n\n                return httpResult.json()\n            })\n            .catch(error => {\n                console.log(error)\n            })\n    }\n\n    const dbDeleteEvent = (deleteEvent) => {\n\n        fetch(`${uriBase}${eventsApi}/delete/${deleteEvent.id}`, {\n            method: \"DELETE\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n            .then(httpResult => {\n                if (!httpResult.ok) {\n                    throw new Error(\"Could not delete user\")\n                }\n\n                return httpResult.json()\n            })\n            .catch(error => {\n                console.log(error)\n            })\n    }\n\n\n    React.useEffect(() => {\n        getEvents()\n    }, [])\n\n    return (\n        <MaterialTable\n            icons={tableIcons}\n            title=\"Events\"\n            columns={state.columns}\n            data={events}\n            editable={{\n                onRowAdd: newData => {\n                    return new Promise(resolve => {\n                        setTimeout(() => {\n                            resolve();\n                            setEvents(prevState => {\n                                const data = [...prevState]\n                                data.push(newData)\n                                addEventToDb(newData)\n                                return data\n                            })\n                        }, 600);\n                    })\n                },\n                onRowUpdate: (newData, oldData) =>\n                    new Promise(resolve => {\n                        setTimeout(() => {\n                            resolve();\n                            if (oldData) {\n                                setEvents(prevState => {\n                                    const data = [...prevState];\n                                    data[data.indexOf(oldData)] = newData;\n                                    dbUpdateEvent(newData)\n                                    return data;\n                                });\n                            }\n                        }, 600);\n                    }),\n                onRowDelete: oldData =>\n                    new Promise(resolve => {\n                        setTimeout(() => {\n                            resolve();\n                            setEvents(prevState => {\n                                const data = [...prevState];\n                                let deleteEvent = data[data.indexOf(oldData)]\n                                data.splice(data.indexOf(oldData), 1);\n                                dbDeleteEvent(deleteEvent)\n                                return data;\n                            });\n                        }, 600);\n                    }),\n            }}\n        />\n    );\n}\n\nexport default EventListView;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\n\nfunction getModalStyle() {\n    const top = 50\n    const left = 50\n\n    return {\n        top: `${top}%`,\n        left: `${left}%`,\n        transform: `translate(-${top}%, -${left}%)`,\n    };\n}\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n        position: 'absolute',\n        width: 400,\n        backgroundColor: theme.palette.background.paper,\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n    },\n}));\n\nexport default function SimpleModal(props) {\n    const classes = useStyles();\n    // getModalStyle is not a pure function, we roll the style only on the first render\n    const [modalStyle] = React.useState(getModalStyle);\n\n    const handleClose = () => {\n        props.setOpen(false)\n    };\n\n    return (\n        <div>\n            <Modal\n                aria-labelledby=\"simple-modal-title\"\n                aria-describedby=\"simple-modal-description\"\n                open={props.open}\n                onClose={handleClose}\n            >\n                <div style={modalStyle} className={classes.paper}>\n                    <h2 id=\"simple-modal-title\">{props.event.title}</h2>\n                    <p id=\"simple-modal-description\">\n                        {`Description: ${props.event.description || 'none'}`}\n                    </p>\n                    <p id=\"simple-modal-description\">\n                        {`Date: ${new Date(props.event.date).toLocaleDateString()}`}\n                    </p>\n                    <p id=\"simple-modal-description\">\n                        {`Type: ${props.event.type}`}\n                    </p>\n                </div>\n            </Modal>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\nimport moment from \"moment\";\nimport { uriBase, eventsApi } from '../const'\nimport EventModel from './EventModel'\n\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\n\n/*\n   * Event {\n   *   title: string,\n   *   start: Date,\n   *   end: Date,\n   *   allDay?: boolean\n   *   resource?: any,\n   * }\n*/\n\nconst DUMMY_DATA = [{\n    title: \"Soccer Game\",\n    start: moment().toDate(),\n    end: moment().add(1, \"days\").toDate(),\n},\n{\n    start: moment().toDate(),\n    end: moment()\n        .add(1, \"days\")\n        .toDate(),\n    title: \"Some title\"\n},\n{\n    start: moment().subtract(1, \"days\").toDate(),\n    end: moment()\n        .subtract(1, \"days\")\n        .toDate(),\n    title: \"Past Event\"\n}\n\n\n]\n\nconst localizer = momentLocalizer(moment)\n\nfunction EventCalendar(props) {\n\n    const [events, setEvents] = React.useState([])\n    const [event, setEvent] = React.useState({})\n    const [dbEvents, setDbEvents] = React.useState([])\n    const [openModel,setOpenModel] = React.useState(false)\n\n    const getEvents = () => {\n\n        return fetch(`${uriBase}${eventsApi}/all`, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n            .then(httpResult => {\n                if (!httpResult.ok) {\n                    throw new Error(\"Failed to get all events\")\n                }\n                return httpResult.json()\n            })\n            .then(events => {\n                setDbEvents(events)\n                return events\n            })\n            .catch(error => {\n                console.log(error)\n            })\n    }\n\n    const mapEventsToCalendar = async () => {\n\n        let dbEvents = await getEvents()\n    \n        let calEvents = dbEvents.reduce((acc, value) => {\n\n            value.title = value.name\n            value.start = value.date\n            value.end = value.date\n\n            acc.push(value)\n\n            return acc\n        },[])\n\n        setEvents(calEvents)\n\n    }\n\n    const onEventSelect = (event) => {\n\n        setEvent(event)\n        setOpenModel(!openModel)\n    }\n\n    React.useEffect(() => {\n        mapEventsToCalendar()\n    },[])\n\n    return (\n        <div>\n            <Calendar\n                localizer={localizer}\n                defaultDate={new Date()}\n                defaultView=\"month\"\n                events={events}\n                style={{ height: \"100vh\" }}\n                views={['month']}\n                onSelectEvent={onEventSelect}\n\n            />\n            {\n                openModel ? <EventModel open={openModel} setOpen={setOpenModel} event={event}></EventModel> : null\n            }\n        </div>\n    );\n}\n\n\nexport default EventCalendar;","import React, { useState } from 'react';\nimport EventListView from './EventListView'\nimport EventCalendar from './EventCalendar'\n\nfunction Home(props) {\n    const [view, setView] = useState('list')\n\n    const onClickHanlder = () => {\n\n        if(view === 'list'){\n            setView('calendar')\n        } else {\n            setView('list')\n        }\n    }\n\n    return (\n        <div>\n            <button onClick={onClickHanlder}>CHANGE VIEW</button>\n            <div>\n                {\n                    view === 'list' ? (\n                        <EventListView></EventListView>\n                    ) : (\n                            <EventCalendar></EventCalendar>\n                        )\n                }\n            </div>\n        </div>\n    );\n}\n\nexport default Home;","import React from 'react';\nimport './App.css';\nimport Home from './components/Home'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home></Home>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const uriBase = \"http://localhost:5002\"\n\nconst eventsApi = \"/events\"\n\nmodule.exports.uriBase = uriBase\nmodule.exports.eventsApi = eventsApi\n"],"sourceRoot":""}